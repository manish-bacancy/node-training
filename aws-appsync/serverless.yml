org: manishrathod769
app: aws-appsync
service: aws-appsync

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  region: "us-east-1"

plugins:
  - serverless-appsync-plugin

layers: # Define layers
  awsSdkUuid:
    path: Layers/awsSdkUuid
    description: "aws-sdk and uuid package"
    compatibleRuntimes:
      - nodejs12.x
      - nodejs14.x
    package:
      include:
        - ./nodejs/node_modules/**

package:
  individually: true
  patterns:
    - '!./**'

custom:
  BooksTable: "books-table"
  OrderTable: "order-table"
  UserPool: "book-store-user"
  UserPoolClient: "Web"
  UserAdminGroup: "ADMIN"
  UserCustomerGroup: "CUSTOMER"
  AdminRoleName: "book-store-admin-role"
  CustomerRoleName: "book-store-customer-role"
  AdminPolicyName: "book-store-admin-group-policy"
  CustomerPolicyName: "book-store-customer-group-policy"
  AppSyncName: "book-store-api"
  appSync:
    schema: schema.graphql
    name: ${self:custom.AppSyncName}
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: "us-east-1"
      defaultAction: "ALLOW"
      userPoolId: !Ref CognitoUserPool
    mappingTemplatesLocation: mapping-templates
    mappingTemplates:
      - dataSource: createBook
        type: Mutation
        field: createBook
        request: default.request.vtl
        response: default.response.vtl
      - dataSource: getBookById
        type: Query
        field: getBookById
        request: default.request.vtl
        response: default.response.vtl
      - dataSource: deleteBook
        type: Mutation
        field: deleteBook
        request: default.request.vtl
        response: default.response.vtl
      - dataSource: updateBook
        type: Mutation
        field: updateBook
        request: default.request.vtl
        response: default.response.vtl
      - dataSource: listBooks
        type: Query
        field: listBooks
        request: default.request.vtl
        response: default.response.vtl
      - dataSource: createOrder
        type: Mutation
        field: createOrder
        request: default.request.vtl
        response: default.response.vtl  
    dataSources:
      - type: AWS_LAMBDA
        name: createBook
        description: "Lambda function to create book"
        config:
          functionName: createBook
      - type: AWS_LAMBDA
        name: getBookById
        description: "Lambda function to get book details"
        config:
          functionName: getBookById
      - type: AWS_LAMBDA
        name: deleteBook
        description: "Lambda function to delete book details"
        config:
          functionName: deleteBook
      - type: AWS_LAMBDA
        name: updateBook
        description: "Lambda function to update book details"
        config:
          functionName: updateBook
      - type: AWS_LAMBDA
        name: listBooks
        description: "Lambda function to list books"
        config:
          functionName: listBooks
      - type: AWS_LAMBDA
        name: createOrder
        description: "Lambda function to order books"
        config:
          functionName: createOrder

functions:
  createBook:
    handler: Lambda/createBook.handler
    package:
      include:
        - ./Lambda/createBook.js
    layers: # Attach Layers
      - { Ref: AwsSdkUuidLambdaLayer }
    role: CognitoAdminIAMRole
  getBookById:
    handler: Lambda/getBookById.handler
    package:
      include:
        - ./Lambda/getBookById.js
    layers:
      - { Ref: AwsSdkUuidLambdaLayer }
    role: CognitoAdminIAMRole
  deleteBook:
    handler: Lambda/deleteBook.handler
    package:
      include:
        - ./Lambda/deleteBook.js
    layers:
      - { Ref: AwsSdkUuidLambdaLayer }
    role: CognitoAdminIAMRole
  updateBook:
    handler: Lambda/updateBook.handler
    package:
      include:
        - ./Lambda/updateBook.js
    layers:
      - { Ref: AwsSdkUuidLambdaLayer }
    role: CognitoAdminIAMRole
  listBooks:
    handler: Lambda/listBooks.handler
    package:
      include:
        - ./Lambda/listBooks.js
    layers:
      - { Ref: AwsSdkUuidLambdaLayer }
    role: CognitoCustomerIAMRole
  createOrder:
    handler: Lambda/createOrder.handler
    package:
      include:
        - ./Lambda/createOrder.js
    layers:
      - { Ref: AwsSdkUuidLambdaLayer }
    role: CognitoCustomerIAMRole

resources:
  Resources: ${file(resources.yml)}
